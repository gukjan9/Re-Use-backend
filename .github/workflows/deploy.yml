name: Deploy to Test Server
on:
  push:
#    branches:
#      - main
    tags:
      - '#*'

env:
  TOKEN: null
  LATEST_TAH: null
  NEW_TAG: null

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # JDK 세팅
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # CD
      # 배포를 위한 prod properties 설정
      - name: Make application-prod.properties
        run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
        shell: bash

      # 프로젝트 빌드
      - name: Build Project With Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew clean bootJar

      # 도커 이미지 태그 확인
      - name: Fetch the latest tag from Docker Hub
        id: fetch_latest_tag
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "${{ secrets.DOCKER_ID }}", "password": "${{ secrets.DOCKER_PASSWORD }}"}' https://hub.docker.com/v2/users/login/ | jq -r '.results[0].token')
          LATEST_TAG=$(curl -s -H "Authorization: JWT $TOKEN" https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}/tags/ | jq -r '.results[0].name')
          echo "Latest tag from Docker Hub is $LATEST_TAG"
          echo "::set-output name=LATEST_TAG::$LATEST_TAG"

      # 도커 이미지 태그 지정
      - name: Determine New Tag
        id: new_tag
        run: |
          if [ "${{ steps.fetch_latest_tag.outputs.LATEST_TAG }}" == "blue" ]; then
            NEW_TAG="green"
          else if [ "${{ steps.fetch_latest_tag.outputs.LATEST_TAG }}" == "green" ]; then
            NEW_TAG="blue"
          else
            NEW_TAG="blue"
          fi
          echo "New tag will be $NEW_TAG"
          echo "::set-output name=TAG::$NEW_TAG"

      # 도커 빌드 & 이미지 push
      - name: Docker build & Push
        run: |
          docker login -u ${{ secrets.DOCKER_ID }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker buildx create --name mybuilder --use
          docker buildx inspect --bootstrap
          docker buildx build --platform linux/amd64,linux/arm/v7 -t ${{ secrets.DOCKER_ID }}/${{ secrets.DOCKER_REPO }}:${{ steps.new_tag.outputs.TAG }} --push .

      # 프로젝트 실행
      - name: Run New Project
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP_ADDRESS }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            source scripts/set_env.sh
            source scripts/update_process.sh

      # Slack Notification
      - name: action-slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: Re-Use Backend
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
          if_mention: failure,cancelled
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

#      - name: Deploy Jar
#        uses: appleboy/scp-action@v0.1.4
#        with:
#          host: ${{ secrets.SSH_IP_ADDRESS }}
#          username: ${{ secrets.SSH_USERNAME }}
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          source: build/libs/demo-0.0.1-SNAPSHOT.jar
#          target: jar